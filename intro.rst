.. _intro:

##########
Setting up
##########

An installer for Java is available from Oracle. At least on OS X, it is required that you install it system-wide, accessible to all users.

Extensive problems with security (and slow patches) suggest you make sure when you're done that the Java plug-in is not activated in your browser.  Checking the compiler version from the command line, I have

.. sourcecode:: bash

    > javac -version
    javac 1.8.0_11

I place the following code in a file ``Hello.java`` on my Desktop

.. sourcecode:: java

    class Hello {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }

and from the command line (in the Desktop directory), I do

.. sourcecode:: bash

    > javac Hello.java 
    > java Hello
    Hello World!
    >

So that's all there is to the install.

The file that is generated by the compiler is ``Hello.class``:

.. sourcecode:: bash

    > ls Hello.*
    Hello.class	Hello.java
    >

Let's unpack the class definition a bit.  First of all, every program needs a ``main`` function, a place to start execution.  Here ``main`` is the only function contained in the ``Hello`` class definition.  (Almost) everything in Java is an object and has a class definition.  Generally speaking there should be one class per file, and that file should have the same name as the class, followed by ``.java``.  We may break this rule in the beginning, putting multiple classes in the same file, just to keep things a bit simpler.

The ``main`` function again:

.. sourcecode:: java

    public static void main(String[] args) {
        System.out.println("Hello World!");
    }

The designation ``public`` means ___ , while ``static`` means __.  The label ``void`` means that this function does not produce, or "return" any result.  In parentheses are the arguments passed to the function (or just empty parentheses, if there are none).  The function itself is surrounded by brackets "{ }", and consists of the single statement

.. sourcecode:: java

    System.out.println("Hello World!");

a somewhat complicated way of printing the string "Hello World!" to the console screen.  The quotation marks indicate this is a ``String`` variable.  The ``println`` tells the system to add a newline at the end of the character stream.

