.. _random:

######
Random
######

In computer programming, random numbers are really "pseudo-random" numbers, which may be generated by various algorithms.  Such numbers appear random by standard tests.  But if the generator starts from a given state multiple times, the sequence of numbers emitted each time will be the same.

In Java, random numbers , can be obtained in several ways.  One method is to use the function ``random`` from the ``Math`` package. 

.. sourcecode:: java

    public class Test { 
        public static void main(String[] args) {
            double r = Math.random(); 
            System.out.printf("Your random number is: %7.5f", r);
            System.out.println();
        }
    }

.. sourcecode:: bash

    > javac Test.java
    > java Test
    Your random number is: 0.57177
    >

In this version we used a "format string" ``"  %7.5f", r`` and the function ``printf``. We could get a newline by writing ``"  %7.5f\n", r`` instead, if we did that then we wouldn't need the next call to ``System.out.println();``.

The main point to make here is that the random number generator gives us a floating point number in the half-open range ``[0,1)``.  This range includes 0 but not 1---although this specification makes more sense for integers than real numbers.

The number you actually see when you run this function will be different (almost) every time, it is random.  :)  

However, a random number generator can usually be seeded to generate the same sequence of numbers.  For that use the ``Random`` class:

.. sourcecode:: java

    import java.util.Random;

    public class Test { 
        public static void main(String[] args) {
            int seed = 137;
            Random rand = new Random(seed);
            double r = rand.nextDouble();
            System.out.printf("Your random number is: %7.5f", r);
            System.out.println();
        }
    }
    
.. sourcecode:: bash

    > javac Test.java
    > java Test
    Your random number is: 0.74163
    > java Test
    Your random number is: 0.74163
    >
    
Everything else is built up from random numbers of this type, in the range ``[0,1)``.  For example, in the next code sample, we obtain an integer in the range ``[1,N]``:

.. sourcecode:: java

    import java.util.Random;

    public class Test { 
        public static int uniformIntInRange(double r, int low, int high) {
            int range = high - low;
            return (int) ((r * range) + low);
        }

        public static void main(String[] args) { 
            int seed = 137;
            Random rand = new Random();
            // rand.setSeed(seed);
            double r = rand.nextDouble();
            int N = 3;
            // a pseudo-random integer between 1 and N (3) inclusive
            int n = uniformIntInRange(r, 1, N + 1);
            System.out.println("Your random integer is: " + n);
        }
    }

.. sourcecode:: bash

    > javac Test.java
    > java Test
    Your random integer is: 1
    > java Test
    Your random integer is: 2
    > java Test
    Your random integer is: 2
    > java Test
    Your random integer is: 1
    > java Test
    Your random integer is: 3
    > java Test
    Your random integer is: 2
    >
    
In the above snippet, we use a *cast* to int, which gives the "floor" or largest integer value that is less than the given floating point number.  In the ``println`` function we also (implicitly) cast from int to a String, which then got concatenated with the first part of the output.  Another way to do this would be to use a format string and do:

.. sourcecode:: java

    System.out.println("Your random integer is: %d", n);

``%d`` is the placeholder used for integers inside format strings.  Next, let's give the user the ability to input a value for ``N``, as follows.  Add the following line as the first line of the function ``main``, and set the seed:

.. sourcecode:: java

    public static void main(String[] args) {
        int N = Integer.parseInt(args[0]);
        int seed = 137;
        Random rand = new Random();
        rand.setSeed(seed);
        double r = rand.nextDouble();
        // a pseudo-random integer between 1 and N inclusive
        int n = uniformIntInRange(r, 1, N + 1);
        System.out.println("Your random integer is: " + n);
    }

Here is the result:

.. sourcecode:: bash

    > javac Test.java
    > java Test 1000
    Your random integer is: 742
    >

As you might expect, if the user does not input a number (or inputs a string or a smiley face or something else), this code will just crash.  To do this right, we need to implement the ability to check for and deal appropriately with errors.  We'll come back to this issue later.
    
Finally, we provide the ability to specify a range of integers for the random number:

.. sourcecode:: java

    public static void main(String[] args) {
        int min = Integer.parseInt(args[0]);
        int max = Integer.parseInt(args[1]);
        int seed = 137;
        Random rand = new Random();
        rand.setSeed(seed);
        double r = rand.nextDouble();
        // a pseudo-random integer between 1 and N inclusive
        int n = uniformIntInRange(r, min, max + 1);
        System.out.println("Your random integer is: " + n);
    }

And the result:

.. sourcecode:: bash

    > javac Test.java
    > java Test 100 125
    Your random integer is: 119
    >

It's worth pointing out that ``Math.Random`` and the ``Random`` class provide a number of methods for generating random numbers of different types.  The ``Random`` class has ``nextInt``, ``nextBoolean``, ``nextGaussian``, and so on.  For real code, it is always better to use the built-in routines.  They have been extensively tested and, when a bug is found, they are updated.  Don't reinvent the wheel.

----------------------
Random Choice, Shuffle
----------------------

Here is some code to pick a random item in a list of items, and also to shuffle a list of items randomly.  To understand more about what we're doing here, I would recommend that you read:

http://en.wikipedia.org/wiki/Random_permutation

The code also shows an introductory example of using generic functions.

.. sourcecode:: java

    import java.util.*;

    class MyRand {  
        public static int randIntInRange(int min, int max) {
            double r = Math.random();
            int range = max - min;
            return (int) (r * range) + min;  
        }
        static public <T> T randomChoice(ArrayList<T> A){
            int n = A.size();
            return A.get(randIntInRange(0,n));
        }
         static public <T> void randomShuffle(ArrayList<T> A){
            int n = A.size();
            int i,j;
            for (i=0; i < n-2; i++) {
                j = randIntInRange(i,n-1);
                Collections.swap(A, i, j);
            }
        }

        public static void main(String[] args) {
            ArrayList<Integer> A = new ArrayList<Integer>();
            for (int i=0; i<10; i++) {
                A.add(MyRand.randIntInRange(0,10));
            }
            System.out.println("A: " + A);
            ArrayList<String> B = new ArrayList<String>() {{ 
                add(".");
                add("=");
                add("x"); }};
            System.out.print("B: ");
            for (int i=0; i<30; i++) {
                 System.out.print(MyRand.randomChoice(B));
            }

            System.out.println();
            MyRand.randomShuffle(A);
            System.out.println("A: " + A);
        }
    }

Output:

.. sourcecode:: bash

    > javac MyRand.java 
    > java MyRand
    A: [9, 7, 6, 7, 7, 6, 6, 5, 9, 8]
    B: =..$....$==..=$..==..=.$====.$
    A: [6, 7, 7, 5, 6, 9, 7, 6, 9, 8]
    > javac MyRand.java 
    > java MyRand
    A: [0, 4, 3, 3, 6, 9, 5, 0, 8, 1]
    B: x=.==x...=x.x.==.xxx=x...x=x..
    A: [3, 4, 6, 9, 3, 8, 0, 0, 5, 1]
    > java MyRand
    A: [0, 6, 3, 0, 5, 3, 5, 1, 6, 3]
    B: x=x..x=x...=.==.x=xx.x.=x..=.x
    A: [3, 6, 5, 6, 0, 0, 1, 5, 3, 3]
    >

Note that ``Collections`` has a number of useful methods like ``shuffle``, ``rotate``, ``sort``, ``reverse``, and so on.
